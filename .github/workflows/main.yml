name: CI/CD w/ docker
on:
  push:
    branches: main

env:
  SERVER_PROD_USER: ${{ secrets.SERVER_USER }}
  SERVER_PROD_IP: ${{ secrets.SERVER_IP }}
  SSH_KEY_VPS: ${{ secrets.VPS_KEY }}

jobs:

  tests-frontend:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - 
        name: checkout code
        uses: actions/checkout@v4
      - 
        name: install nodejs
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./frontend/package.json
      - 
        name: install dependency
        run: npm ci --prefer-offline
      - 
        name: verify code
        run: npm run lint
      - 
        name: check packages vulerabilities
        run: npm audit --moderate

  tests-backend:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./node-api
    steps:
      - 
        name: checkout code
        uses: actions/checkout@v4
      - 
        name: install nodejs
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./node-api/package.json
      - 
        name: install dependency
        run: npm ci --prefer-offline
      - 
        name: verify code
        run: npm run lint
      - 
        name: check packages vulerabilities
        run: npm audit --moderate
      - 
        name: unit tests
        run: npm run test:ci
      - 
        name: Upload e2e coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}

  build:
    needs: [tests-frontend, tests-backend]
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        include:
        -
          context_name: ./frontend
          image_name: ghcr.io/${{ github.repository }}/frontend:latest
        -
          context_name: ./node-api
          image_name: ghcr.io/${{ github.repository }}/node-api:latest

    permissions:
      packages: write

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context_name }}
          push: true
          tags: ${{ matrix.image_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    needs: [build]
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - 
        name: checkout code
        uses: actions/checkout@v4
      - 
        name: install nodejs
        uses: actions/setup-node@v4
        with:
          cache: "npm"
          cache-dependency-path: ./frontend/package.json
      - 
        name: install dependency
        run: npm ci --prefer-offline
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: execute e2e tests
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      -
        name: cleanup containers & volumes
        run : docker compose down -v --remove-orphans

  deploy-production:
    needs: e2e
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
      url: http://SERVER_PROD_IP

    steps:
      - 
        name: checkout code
        uses: actions/checkout@v4
      - 
        name: deploy prod
        run: |
          mkdir -p ~/.ssh
          eval $(ssh-agent -s)
          ssh-add - <<< "$SSH_KEY_VPS"
          ssh-keyscan -t rsa -H $SERVER_PROD_IP >> ~/.ssh/known_hosts
          scp docker-compose.production.yml $SERVER_PROD_USER@$SERVER_PROD_IP:/var/www-prod/docker-compose.production.yml
          ssh $SERVER_PROD_USER@$SERVER_PROD_IP "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && docker compose -f /var/www-prod/docker-compose.production.yml up -d --force-recreate"
